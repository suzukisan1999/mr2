* M16C Series and R8C Family Assmbler *   SOURCE LIST       Mon Nov 30 02:03:08 2015  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;----------------------------------------------------------------------
     2                                  ;                                                                     |
     3                                  ;                                                                     |
     4                                  ;                                                                     |
     5                                  ;   DESCRIPTION : Startup Program. (for Assembler language)           |
     6                                  ;                                                                     |
     7                                  ;                                                                     |
     8                                  ;   This file is generated by Renesas Project Generator.              |
     9                                  ;                                                                     |
    10                                  ;----------------------------------------------------------------------
    11                                  ;/*********************************************************************
    12                                  ;*
    13                                  ;* Device     : R8C Family
    14                                  ;*
    15                                  ;* File Name  : ncrt0.a30
    16                                  ;*
    17                                  ;* Abstract   : Startup Program
    18                                  ;*
    19                                  ;* History    : 1.01  (2006-11-22)
    20                                  ;*
    21                                  ;* NOTE       : THIS IS A TYPICAL EXAMPLE.
    22                                  ;*
    23                                  ;* Copyright (C) 2006 Renesas Electronics Corporation.
    24                                  ;* and Renesas Solutions Corp.
    25                                  ;*
    26                                  ;*********************************************************************/
    27                                  ;---------------------------------------------------------------------
    28                                  ; include files
    29                                  ;---------------------------------------------------------------------
    30                                  		.list		OFF
    31                                  		.list		ON
    32                                  
    33                                  ;=====================================================================
    34                                  ; Interrupt section start
    35                                  ;---------------------------------------------------------------------
    36                                  		.glb		start
    37                                  		.section	interrupt,CODE,ALIGN
    38                                  		.insf		start,G,0
    39  00000                           start:
    40                                  ;---------------------------------------------------------------------
    41                                  ; after reset,this program will start
    42                                  ;---------------------------------------------------------------------
    43  00000  EB400000r                		ldc			#((topof istack)+(sizeof istack)),isp ;set istack pointer
    44  00004  C7020A00              S  		mov.b		#02h,0ah
    45  00008  B70400                Z  		mov.b		#00h,04h			;set processer mode 
    46  0000B  B70A00                Z  		mov.b		#00h,0ah
    47                                  .if __STACKSIZE__ != 0
    48                                  .else
    49  0000E  EB300000                 		ldc			#0000h,flg
    50                                  .endif
    51  00012  EB600004                 		ldc			#__SB__,sb			;set sb register
    52                                  
    53                                  		; If the destination is INTBL or INTBH,
    54                                  		; make sure that bytes are transferred in succession.
    55  00016  EB200000r                		ldc			#((topof vector)>>16)&0FFFFh,INTBH
    56  0001A  EB100000r                		ldc			#(topof vector)&0FFFFh,INTBL
    57                                  
    58                                  ;=====================================================================
    59                                  ; NEAR area initialize.
    60                                  ;---------------------------------------------------------------------
    61                                  ; bss zero clear
    62                                  ;---------------------------------------------------------------------
* M16C Series and R8C Family Assmbler *   SOURCE LIST       Mon Nov 30 02:03:08 2015  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    63                                  		N_BZERO		(topof bss_SE),bss_SE
    64  0001E  B4                1 M Z  		mov.b		#00H, R0L
    65  0001F  AA0000r           1 M S  		mov.w		#((topof bss_SE) & 0FFFFH), A1
    66  00022  75C30000r         1 M    		mov.w		#sizeof bss_SE , R3
    67  00026  7CEA              1 M    		sstr.b
    68                           1 M    		.endm
    69                                  		N_BZERO		(topof bss_SO),bss_SO
    70  00028  B4                1 M Z  		mov.b		#00H, R0L
    71  00029  AA0000r           1 M S  		mov.w		#((topof bss_SO) & 0FFFFH), A1
    72  0002C  75C30000r         1 M    		mov.w		#sizeof bss_SO , R3
    73  00030  7CEA              1 M    		sstr.b
    74                           1 M    		.endm
    75                                  		N_BZERO		(topof bss_NE),bss_NE
    76  00032  B4                1 M Z  		mov.b		#00H, R0L
    77  00033  AA0000r           1 M S  		mov.w		#((topof bss_NE) & 0FFFFH), A1
    78  00036  75C30000r         1 M    		mov.w		#sizeof bss_NE , R3
    79  0003A  7CEA              1 M    		sstr.b
    80                           1 M    		.endm
    81                                  		N_BZERO		(topof bss_NO),bss_NO
    82  0003C  B4                1 M Z  		mov.b		#00H, R0L
    83  0003D  AA0000r           1 M S  		mov.w		#((topof bss_NO) & 0FFFFH), A1
    84  00040  75C30000r         1 M    		mov.w		#sizeof bss_NO , R3
    85  00044  7CEA              1 M    		sstr.b
    86                           1 M    		.endm
    87                                  
    88                                  ;---------------------------------------------------------------------
    89                                  ; initialize data section
    90                                  ;---------------------------------------------------------------------
    91                                  		N_BCOPY		(topof data_SEI),(topof data_SE),data_SE
    92  00046  A20000r           1 M S  		mov.w		#((topof data_SEI) & 0FFFFH),A0
    93  00049  74C300r           1 M    		mov.b		#((topof data_SEI) >>16),R1H
    94  0004C  AA0000r           1 M S  		mov.w		#(topof data_SE) ,A1
    95  0004F  75C30000r         1 M    		mov.w		#sizeof data_SE , R3
    96  00053  7CE8              1 M    		smovf.b
    97                           1 M    		.endm
    98                                  		N_BCOPY		(topof data_SOI),(topof data_SO),data_SO
    99  00055  A20000r           1 M S  		mov.w		#((topof data_SOI) & 0FFFFH),A0
   100  00058  74C300r           1 M    		mov.b		#((topof data_SOI) >>16),R1H
   101  0005B  AA0000r           1 M S  		mov.w		#(topof data_SO) ,A1
   102  0005E  75C30000r         1 M    		mov.w		#sizeof data_SO , R3
   103  00062  7CE8              1 M    		smovf.b
   104                           1 M    		.endm
   105                                  		N_BCOPY		(topof data_NEI),(topof data_NE),data_NE
   106  00064  A20000r           1 M S  		mov.w		#((topof data_NEI) & 0FFFFH),A0
   107  00067  74C300r           1 M    		mov.b		#((topof data_NEI) >>16),R1H
   108  0006A  AA0000r           1 M S  		mov.w		#(topof data_NE) ,A1
   109  0006D  75C30000r         1 M    		mov.w		#sizeof data_NE , R3
   110  00071  7CE8              1 M    		smovf.b
   111                           1 M    		.endm
   112                                  		N_BCOPY		(topof data_NOI),(topof data_NO),data_NO
   113  00073  A20000r           1 M S  		mov.w		#((topof data_NOI) & 0FFFFH),A0
   114  00076  74C300r           1 M    		mov.b		#((topof data_NOI) >>16),R1H
   115  00079  AA0000r           1 M S  		mov.w		#(topof data_NO) ,A1
   116  0007C  75C30000r         1 M    		mov.w		#sizeof data_NO , R3
   117  00080  7CE8              1 M    		smovf.b
   118                           1 M    		.endm
   119                                  
   120                                  ;=====================================================================
   121                                  ; heap area initialize
   122                                  ;---------------------------------------------------------------------
   123                                  .if __HEAPSIZE__ != 0
   124                                  .endif
* M16C Series and R8C Family Assmbler *   SOURCE LIST       Mon Nov 30 02:03:08 2015  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   125                                  
   126                                  ;=====================================================================
   127                                  ; Initialize standard I/O
   128                                  ;---------------------------------------------------------------------
   129                                  .if __STANDARD_IO__ == 1
   130                                  .endif
   131                                  
   132                                  ;=====================================================================
   133                                  ; Call main() function
   134                                  ;---------------------------------------------------------------------
   135  00082  EB700000                 		ldc			#0h,fb				; for debuger
   136                                  
   137                                  ; Remove the comment when you use global class object
   138                                  ; Sections C$INIT will be generated
   139                                  ;		.glb		__CALL_INIT
   140                                  ;		.call		__CALL_INIT,G
   141                                  ;		jsr.a		__CALL_INIT
   142                                  
   143                                  		.glb		_main
   144                                  		.call		_main,G
   145  00086  FD000000r             A  		jsr.a		_main
   146                                  
   147                                  ;=====================================================================
   148                                  ; exit() function
   149                                  ;---------------------------------------------------------------------
   150                                  		.glb		_exit
   151                                  		.glb		$exit
   152                                  		.glb		__exit_loop
   153  0008A                           _exit:
   154  0008A                           $exit:
   155                                  
   156                                  ; Remove the comment when you use global class object
   157                                  ; Sections C$INIT will be generated
   158                                  ;		.glb		__CALL_END
   159                                  ;		.call		__CALL_END,G
   160                                  ;		jsr.a		__CALL_END
   161                                  
   162  0008A                           __exit_loop:							; End program
   163  0008A  FEFF                  B  		jmp			__exit_loop
   164                                  		.einsf
   165                                  ;=====================================================================
   166                                  ; dummy interrupt function
   167                                  ;---------------------------------------------------------------------
   168                                  		.glb		dummy_int
   169  0008C                           dummy_int:
   170  0008C  FB                       		reit
   171                                  
   172                                  		.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00172   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0000128(00080H)  istack
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  vector
ROMDATA  0000040(00028H)  fvector
CODE     0000141(0008DH)  interrupt
